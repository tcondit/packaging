[catalog braindump]

Catalogs are the heart of etpkgmanager.  They describe what is and what could
be.  They are the reference catalog, or refcat, and the system catalog, or
syscat.

The refcat is a description of every cataloged component that has been
released from a manufacturer.  It may include multiple products and multiple
versions of each product.  It is comprehensive: if it's not in the refcat, it
is not a known released component.  The refcat is a write-only resource that
is designed to be maintained by the software manufacturer.  As software
(patches, full releases, whatever) is released, it is added to the refcat, and
a new catalog version is declared.  Each version of refcat includes install
information about all patched components, along with the target systems for
such a patch.

For example, a patch may include a new ChanMgrSvc.exe and ChanMgrSvc.pdb.
These belong to the Envision Server.  ChanMgrSvc.exe depends on Envision
Server being installed (possibly identified by the existence of the Envision
Server syscat), and ChanMgrSvc.pdb depends on the specific version of
ChanMgrSvc.exe being installed.  So the refcat needs to include information
about the application-level dependencies, along with file-level dependencies.
Note: we're only concerned with hard, one-directional dependencies.

EPM is a distributed package management tool, and the refcat is the closest
thing EPM has to a centralized structure.


The syscat is generated on the host machine.  It describes the state of the
system, and by definition is not comprehensive.  [Footnote: to be pedantic, if
only one version of one or more products has been released, it may be
comprehensive, but that is only by circumstance, and not by design.]  It is a
description of the system at some point in time.  Every time there is a
managed change to the system, a new syscat is generated (TODO or appended to,
open question).  If necessary, the syscat can roll back a system to it's
former state.

A file is a component by virtue of being cataloged in the refcat.  The syscat
may contain both known components and unknown files.  On an installation (or
more) with no changes from the default, the contents of the syscat should be a
proper subset of the refcat.  That is, every component of the syscat should be
recognized as a released component.

--

Both catalogs may contain components that are installed in multiple places.
Practically, this means that the component has a single hexdigest, but
multiple relative install paths.  (Install paths are always relative to the
application root.)  The values attached to the hexdigest keys list all the
places where a particular component should be updated.  These paths are
relative to the installation directory of a particular application.

<aside>
The catalogs are not designed to be used to find software to install.  (Why
not?)
</aside>



The basic file format of the catalogs are ...

The catalogs are JSON-formatted text.  It's easy to read and write, and easy
to serialize.  Note, JSON does not support hex digits, so the digests are
encoded as strings.

Q: Should each product have it's own catalog?  Something to consider.
A: It would make it simpler to identify which products are expected.  And it
   would keep the catalogs shorter, since there would not be a single refcat
   for every patch everywhere.  On the other hand, with multiple catalogs,
   there is the possibility of duplicate hexdigits.  On the face of it, that
   seems bad.  But is it?  I don't see why it is.  It just means that the same
   file contents are present on more than one system.  They're completely
   different applications!  It doesn't matter.

   A major reason to separate them is that it changes the way you think about
   them and work with them.  With, say, a Server catalog and an AgentSupport
   catalog, you can clone them separately.  That's huge.  It's big enough to
   go forward with it.  Maybe we'll need a lightweight metacatalog of all
   applications (appcat?), but I don't see a need for it right now.

   Consider this scenario: we've got a refcat that lists one component, and
   two applications in which it's to be applied.  What if only one of the
   applications is being updated?  Sure, it's easy to say "only update
   application X, not Y", but it's an unnecessary step.  Another reason to
   separate them at the application boundary.

   Whether we have one or multiple catalogs, it seems clear that the refcat
   and syscat should both use the same scheme.  It doesn't make a lot of
   sense to have, for example, a single refcat and multiple syscats.


envision_server.refcat:
"""
{
    "version": <incrementing integer starting from 0>
    "components":
    {
        "hexdigest1":
        [
            "first relative path to component1"
            "second relative path to component1"
            "third relative path to component1"
        ]
        "hexdigest2":
        [
            "relative path to component2"
        ]
        "hexdigest3":
        [
            ...
        ]
    }
    "version": <version++>
    "components":
    {
        "hexdigestN":
        [
            "relative path to componentN"
        ]
        "hexdigestN+1":
        [
            "relative path to componentN+1"
        ]
        "hexdigestN+2":
        [
            ...
        ]
    }
}
"""

example:
>>> json.dumps({"version": 1, "components": {"a5e22878": ["path1", "path2"], "4e4509cd": ["path3", "path4"]}})
'{"version": 1, "components": {"a5e22878": ["path1", "path2"], "4e4509cd": ["path3", "path4"]}}'

the same example:
>>> json.dumps(
...   {
...     "version": 1,
...     "components":
...     {
...       "a5e22878":
...       [
...         "path1", "path2"
...       ],
...       "4e4509cd":
...       [
...         "path3", "path4"
...       ]
...     }
...   }
... )
'{"version": 1, "components": {"a5e22878": ["path1", "path2"], "4e4509cd": ["path3", "path4"]}}'


"""
envision_server.syscat:

TODO
"""

If it turns out that we need more information for each path, the lists will
have to be turned into JSON objects (equivalent to, among other things, Python
dictionaries).

